[build-system]
build-backend = "hatchling.build"
requires = [
  "async_timeout>4,<6",
  "hatchling>=1.14.0",
  "hatch-mypyc>=0.1.0",
  "hatch-vcs>=0.4.0",
  "mypy==1.18.1",
  "types-deprecated",
  "pympler>1,<2",
  "beartype>=0.20",
]

[project]
name = "coredis"
dynamic = ["version"]
description = "Python async client for Redis key-value store"
readme = "README.md"
license = "MIT"
license-files = ["LICENSE"]
authors = [
  {name = "Ali-Akber Saifee", email = "ali@indydevs.org"}
]
maintainers = [
  {name = "Ali-Akber Saifee", email = "ali@indydevs.org"}
]
keywords = ["Redis", "key-value store", "asyncio"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: PyPy",
]
requires-python = ">=3.10"
dependencies = [
  "async_timeout>4,<6",
  "beartype>=0.20",
  "deprecated>=1.2",
  "typing_extensions>=4.13",
  "packaging>=21,<26",
  "pympler>1,<2",
]

[project.optional-dependencies]
recipes = [
  "aiobotocore>=2.15.2",
  "asyncache>=0.3.1",
]

[dependency-groups]

test = [
  "beartype",
  "coverage",
  "lovely-pytest-docker",
  "mock",
  "numpy",
  "pytest",
  "pytest-asyncio",
  "pytest-cov",
  "pytest-env",
  "pytest-lazy-fixtures",
  "pytest-mock",
  "pytest-reverse",
  "redis",
  "aiobotocore>=2.15.2",
  "asyncache>=0.3.1",
  "moto"
]

dev = [
  "click==8.1.2",
  "hatch>=1.14.0",
  "hatch-mypyc>=0.1.0",
  "inflect>=6.0.0",
  "Jinja2==3.1.5",
  "mypy==1.17.1; implementation_name!='pypy'",
  "redis>=4.2.0",
  "ruff",
  "types-deprecated",
  {include-group = "test"},
]

ci = [
  "pytest-rerunfailures",
  "pytest-sentry",
  {include-group = "dev"},
]

docs = [
  "requests>2,<3",
  "furo==2025.9.25",
  "Sphinx>=4,<9",
  "sphinx-copybutton==0.5.2",
  "sphinx-autobuild==2024.10.3",
  "sphinx-issues==5.0.1",
  "sphinxext-opengraph==0.13.0",
  "sphinx-sitemap==2.8.0",
  "sphinx-paramlinks==0.6.0",
  "sphinxcontrib-programoutput==0.18",
  "botocore",
  "cachetools",
  {include-group = "dev"},
]

[project.urls]
Homepage = "https://github.com/alisaifee/coredis"
Source = "https://github.com/alisaifee/coredis"
Changelog = "https://github.com/alisaifee/coredis/releases"
Documentation = "https://coredis.readthedocs.org"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["coredis"]

[tool.hatch.build.hooks.vcs]
version-file = "coredis/_version.py"

[tool.hatch.build.targets.wheel.hooks.mypyc]
enable-by-default = false
dependencies = [
  "hatch-mypyc>=0.16.0",
  "mypy==1.18.1",
]
require-runtime-dependencies = true
include = [
  "coredis/constants.py",
  "coredis/parser.py",
  "coredis/_packer.py",
  "coredis/_utils.py",
]
mypy-args = [
  "--ignore-missing-imports",
  "--disable-error-code=import-untyped",
  "--disable-error-code=no-redef",
  "--disable-error-code=override",
  "--disable-error-code=return-value",
  "--disable-error-code=arg-type",
  "--disable-error-code=assignment",
  "--disable-error-code=index",
  "--disable-error-code=union-attr",
  "--disable-error-code=misc",
  "--disable-error-code=type-arg",
  "--disable-error-code=dict-item",
  "--disable-error-code=call-overload",
  "--disable-error-code=var-annotated",
  "--disable-error-code=return",
  "--disable-error-code=str-bytes-safe",
  "--disable-error-code=type-var",
  "--disable-error-code=typeddict-item"
]
options = { debug_level = "0" }

[tool.mypy]
strict = true
check_untyped_defs = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
exclude = ["coredis/_py_312_typing.py"]

[[tool.mypy.overrides]]
module = [
    "async_timeout",
    "beartype",
    "asyncache",
    "aiobotocore.*",
    "botocore.*",
    "cachetools",
    "deprecated",
    "pympler",
]
ignore_errors = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "coredis.response._callbacks.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "coredis.modules.response._callbacks.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "coredis._version"
ignore_errors = true
ignore_missing_imports = true

[tool.ruff]
line-length=100
exclude = ["doc/**","_version.py","coredis/_py_312_typing.py"]

[tool.ruff.lint]
typing-modules = ["coredis.typing"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.cibuildwheel.environment]
HATCH_BUILD_HOOKS_ENABLE = "1"
MYPYC_OPT_LEVEL = "3"

[tool.cibuildwheel.linux.environment]
HATCH_BUILD_HOOKS_ENABLE = "1"
MYPYC_OPT_LEVEL = "3"

