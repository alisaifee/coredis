name: CI

on: [push, pull_request]

jobs:
  lint:
    name: Lint (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
    - uses: actions/checkout@v3
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group dev
    - name: Lint with ruff
      run: |
        uv run ruff check --select I coredis tests
        uv run ruff check coredis tests
    - name: Check types
      run: |
        uv run mypy coredis
    - name: Check auto generated sources
      run: |
        make templated-sources
        if [ ! -z "$(git diff coredis)" ];
        then
          echo "Auto-generated source are not up to date"
          git diff
          exit 1
        fi;
  test:
    name: Test (Python ${{ matrix.python-version }}, Redis ${{ matrix.redis-version }}${{ matrix.uvloop == 'True' && ', uvloop' || ''}}${{ matrix.orjson == 'True' && ', orjson' || ''}}${{ matrix.extensions == 'True' && ', compiled' || ''}}${{ matrix.label && format(', {0}', matrix.label) || '' }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.redis-version == 'next' }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        redis-version: ["7.0", "7.2", "7.4", "8.0", "latest"]
        test_params: ["-m '(not (dragonfly or valkey or redict))'"]
        uvloop: ["False"]
        orjson: ["False"]
        runtime_type_checks: ["True"]
        extensions: ["True"]
        label: [""]
        include:
          - python-version: "3.13"
            redis-version: next
            test_params: "-m '(not (dragonfly or valkey or redict))'"
            runtime_type_checks: "True"
            label: ""
          - python-version: "3.13"
            redis-version: "latest"
            test_params: "-m '(not (dragonfly or valkey or redict))'"
            runtime_type_checks: "True"
            extensions: "False"
          - python-version: "3.13"
            redis-version: "latest"
            test_params: "-m '(not (dragonfly or valkey or redict))'"
            runtime_type_checks: "True"
            uvloop: "True"
          - python-version: "3.13"
            redis-version: "latest"
            test_params: "-m dragonfly"
            label: "Dragonfly"
          - python-version: "3.13"
            redis-version: "7.0"
            test_params: "-m valkey"
            label: "Valkey"
          - python-version: "3.13"
            redis-version: "8.0"
            test_params: "-m valkey"
            label: "Valkey"
          - python-version: "3.13"
            redis-version: "7.0"
            test_params: "-m redict"
            label: "Redict"
          - python-version: "pypy-3.10"
            redis-version: "8.0"
            test_params: "-m '(not (dragonfly or valkey or redict))' tests/commands tests/test_tracking_cache.py"
            runtime_type_checks: "False"
            extensions: "False"
            uvloop: "False"
            label: ""
    steps:
    - uses: actions/checkout@v3
    - name: Install uv and Python
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        python-version: ${{ matrix.python-version }}
    - name: Setup uv venv
      run: |
        uv sync --locked --all-extras --group ci
    - name: Compile extensions
      if: ${{ matrix.extensions == 'True' }}
      run: uv run mypyc coredis/constants.py coredis/parser.py coredis/_packer.py
    - name: Install uvloop
      if: ${{ matrix.uvloop == 'True' }}
      run:
        uv pip install uvloop
    - name: Install orjson
      if: ${{ matrix.orjson == 'True' }}
      run:
        uv pip install orjson
    - name: Tests
      env:
        COREDIS_UVLOOP: ${{ matrix.uvloop }}
        HOST_OS: linux
        CI: "True"
        COREDIS_REDIS_VERSION: ${{matrix.redis-version}}
        COREDIS_RUNTIME_CHECKS: ${{matrix.runtime_type_checks}}
        PYTEST_SENTRY_DSN: ${{ matrix.extensions != 'True' && secrets.SENTRY_DSN || ''}}
        COMPOSE_PARALLEL_LIMIT: 1
      run: |
        echo "Runtime checks: $COREDIS_RUNTIME_CHECKS"
        echo "UVLoop: $COREDIS_UVLOOP"
        echo "CI: $CI"
        uv run pytest --reverse --reruns 2 --cov=coredis --cov-report=xml ${{ matrix.test_params }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.2.0
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  generate_wheels_matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install cibuildwheel and pypyp
        run: |
          pipx install cibuildwheel==2.22.0
          pipx install pypyp==1.3
      - id: set-matrix
        run: |
          MATRIX=$(
            {
              cibuildwheel --print-build-identifiers --platform linux . \
              | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})' \
              && cibuildwheel --print-build-identifiers --platform macos . \
              | pyp 'json.dumps({"only": x, "os": "macos-latest"})'
            } | pyp 'json.dumps(list(map(json.loads, lines)))'
          )
          echo "include=$MATRIX" | tee -a $GITHUB_OUTPUT
        env:
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_ARCHS_MACOS: auto arm64
          CIBW_SKIP: '*musllinux* pp*'
  build_wheels:
    needs: [generate_wheels_matrix]
    name: Build wheel on ${{ matrix.only }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          ${{ fromJson(needs.generate_wheels_matrix.outputs.include) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Setup uv venv
        run: |
          uv sync --locked --all-extras --group dev
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
      - name: Build wheel
        uses: pypa/cibuildwheel@v2.22.0
        with:
          only: ${{ matrix.only }}
        env:
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BUILD_FRONTEND: "build[uv]"
          CIBW_TEST_COMMAND: "uv run python -c 'import coredis'"
          USE_MYPYC: true
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{matrix.only}}
          path: ./wheelhouse/*.whl
  build_pure_wheel:
    needs: [lint]
    name: Build pure python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build wheels
        env:
          PURE_PYTHON: true
        run: |
          uv build
      - uses: actions/upload-artifact@v4
        with:
          name: pure_wheels
          path: ./dist/*.whl
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install uv and Python
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build sdist
        run: |
          uv build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: src_dist
          path: dist/*.tar.gz
  upload_pypi:
    needs: [build_wheels, build_pure_wheel, build_sdist]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true
          verbose: true
  upload_pypi_release:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1

  github_release:
    needs: [upload_pypi_release]
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: "*wheels*"
          merge-multiple: true
          path: dist
      - name: Download source dist
        uses: actions/download-artifact@v4
        with:
          name: src_dist
          path: dist
      - name: Generate release notes
        run: |
          ./scripts/github_release_notes.sh > release_notes.md
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          bodyFile: release_notes.md
          token: ${{ secrets.GITHUB_TOKEN }}

